"""
BLOCKCHAIN INTEGRATION - Integrate user actions with blockchain storage
Demonstrates how user registration, authentication, and actions are recorded on blockchain
"""

import sys
from pathlib import Path

# Add project root to path
sys.path.append(str(Path(__file__).parent.parent.parent))

# Import both user and blockchain systems
try:
    from users.backend import UserBackend
    from users.auth import SessionManager, AuthenticationService
    from blockchain.blockchain import CivicBlockchain, add_user_action, get_network_stats
    from utils.validation import DataValidator
    print("‚úÖ All systems imported successfully")
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    sys.exit(1)

def test_user_blockchain_integration():
    """Test complete integration of user system with blockchain"""
    
    print("\n" + "="*70)
    print("üèõÔ∏è CIVIC ENGAGEMENT PLATFORM - BLOCKCHAIN INTEGRATION TEST")
    print("="*70)
    
    # Initialize systems
    print("\nüîß Initializing systems...")
    user_backend = UserBackend()
    blockchain = CivicBlockchain()
    
    print("‚úÖ User backend and blockchain initialized")
    
    # Test user registration with blockchain recording
    print("\nüìù Testing user registration with blockchain...")
    
    test_user_data = {
        'first_name': 'Alice',
        'last_name': 'Democracy',
        'email': 'alice.democracy@civic.test',
        'password': 'SecurePass123!',
        'confirm_password': 'SecurePass123!',
        'city': 'Democracy City',
        'state': 'Freedom State',  
        'country': 'United States',
        'terms_accepted': True
    }
    
    # Register user (this will automatically record on blockchain)
    success, message, user_record = user_backend.register_user(test_user_data)
    
    if success:
        print(f"‚úÖ User registered: {message}")
        print(f"   User ID: {user_record['user_id']}")
        print(f"   Email: {user_record['email']}")
        print(f"   Role: {user_record['role']}")\n        \n        # Manually add blockchain record for demonstration\n        blockchain_success, blockchain_message, page_id = add_user_action(\n            action_type='user_registration',\n            user_email=user_record['email'],\n            data={\n                'user_id': user_record['user_id'],\n                'name': f"{user_record['first_name']} {user_record['last_name']}",\n                'location': f"{user_record['city']}, {user_record['state']}, {user_record['country']}",\n                'role': user_record['role'],\n                'registration_method': 'civic_platform_wizard',\n                'constitutional_rights': True,\n                'blockchain_address': user_record.get('blockchain_address', 'pending'),\n                'rsa_key_fingerprint': user_record.get('key_fingerprint', 'generated')\n            }\n        )\n        \n        if blockchain_success:\n            print(f"‚úÖ Registration recorded on blockchain: {page_id}")\n        else:\n            print(f"‚ùå Blockchain recording failed: {blockchain_message}")\n    else:\n        print(f"‚ùå User registration failed: {message}")\n        return\n    \n    # Test authentication with blockchain logging\n    print(f"\nüîê Testing authentication with blockchain logging...")\n    \n    auth_success, auth_message, auth_user = user_backend.authenticate_user(\n        test_user_data['email'],\n        test_user_data['password']\n    )\n    \n    if auth_success:\n        print(f"‚úÖ Authentication successful")\n        \n        # Record login on blockchain\n        login_success, login_message, login_page_id = add_user_action(\n            action_type='user_login',\n            user_email=auth_user['email'],\n            data={\n                'user_id': auth_user['user_id'],\n                'login_method': 'email_password',\n                'session_type': 'secure_desktop',\n                'ip_address': 'localhost',  # Would be real IP in production\n                'user_agent': 'Civic Desktop v1.0',\n                'two_factor_enabled': False,\n                'login_success': True\n            }\n        )\n        \n        if login_success:\n            print(f"‚úÖ Login recorded on blockchain: {login_page_id}")\n        \n        # Create session with blockchain logging\n        session_success, session_message, session_id = user_backend.create_session(auth_user)\n        \n        if session_success:\n            print(f"‚úÖ Session created: {session_id[:16]}...")\n            \n            # Record session creation\n            session_blockchain_success, session_blockchain_message, session_page_id = add_user_action(\n                action_type='session_created',\n                user_email=auth_user['email'],\n                data={\n                    'user_id': auth_user['user_id'],\n                    'session_id': session_id,\n                    'session_duration': '24_hours',\n                    'security_level': 'high',\n                    'auto_logout': True\n                }\n            )\n            \n            if session_blockchain_success:\n                print(f"‚úÖ Session creation recorded on blockchain: {session_page_id}")\n        \n    else:\n        print(f"‚ùå Authentication failed: {auth_message}")\n        return\n    \n    # Test role elevation with blockchain recording\n    print(f"\nüëë Testing role elevation with blockchain...")\n    \n    role_success, role_message = user_backend.update_user_role(\n        user_record['user_id'],\n        'contract_representative',\n        'system_admin'  # Who authorized the change\n    )\n    \n    if role_success:\n        print(f"‚úÖ Role updated: {role_message}")\n        \n        # Record role change on blockchain\n        role_blockchain_success, role_blockchain_message, role_page_id = add_user_action(\n            action_type='role_assignment',\n            user_email=user_record['email'],\n            data={\n                'user_id': user_record['user_id'],\n                'previous_role': 'contract_citizen',\n                'new_role': 'contract_representative',\n                'authorized_by': 'system_admin',\n                'election_type': 'appointment',  # Would be 'election' if voted\n                'constitutional_authority': 'administrative_appointment',\n                'effective_date': 'immediate',\n                'term_length': '2_years'\n            }\n        )\n        \n        if role_blockchain_success:\n            print(f"‚úÖ Role change recorded on blockchain: {role_page_id}")\n    \n    # Test civic action with blockchain\n    print(f"\nüó≥Ô∏è Testing civic action with blockchain...")\n    \n    # Simulate a debate participation\n    debate_success, debate_message, debate_page_id = add_user_action(\n        action_type='debate_participation',\n        user_email=user_record['email'],\n        data={\n            'user_id': user_record['user_id'],\n            'debate_topic': 'Municipal Budget Allocation 2026',\n            'position': 'support',\n            'argument_length': 250,\n            'sources_cited': 3,\n            'constitutional_compliance': True,\n            'moderation_flags': 0,\n            'peer_quality_rating': 4.2,\n            'engagement_type': 'constructive_argument'\n        }\n    )\n    \n    if debate_success:\n        print(f"‚úÖ Debate participation recorded: {debate_page_id}")\n    \n    # Test voting action\n    vote_success, vote_message, vote_page_id = add_user_action(\n        action_type='vote_cast',\n        user_email=user_record['email'],\n        data={\n            'user_id': user_record['user_id'],\n            'vote_type': 'municipal_election',\n            'ballot_id': 'ballot_2026_001',\n            'position': 'mayor',\n            'candidate': 'candidate_smith_j',\n            'jurisdiction': 'democracy_city',\n            'encryption_method': 'rsa_2048',\n            'vote_verified': True,\n            'constitutional_eligibility': True\n        }\n    )\n    \n    if vote_success:\n        print(f"‚úÖ Vote recorded on blockchain: {vote_page_id}")\n    \n    # Get blockchain statistics\n    print(f"\nüìä Getting blockchain network statistics...")\n    \n    stats = get_network_stats()\n    print(f"   Total pages: {stats['total_pages']}")\n    print(f"   Active pages: {stats['active_pages']}")\n    print(f"   Total chapters: {stats['total_chapters']}")\n    print(f"   Active validators: {stats['active_validators']}")\n    print(f"   Blockchain health: {stats['blockchain_health']}")\n    \n    # Search blockchain for user actions\n    print(f"\nüîç Searching blockchain for user actions...")\n    \n    from blockchain.blockchain import search_user_actions\n    user_actions = search_user_actions(user_record['email'])\n    \n    print(f"   Found {len(user_actions)} actions for {user_record['email']}:")\n    for action in user_actions:\n        print(f"     - {action['action_type']} at {action['timestamp']}")\n    \n    # Verify blockchain integrity\n    print(f"\nüîê Verifying blockchain integrity...")\n    \n    is_valid, errors = blockchain.verify_blockchain_integrity()\n    \n    if is_valid:\n        print(f"‚úÖ Blockchain integrity verified - all records valid")\n    else:\n        print(f"‚ùå Blockchain integrity issues:")\n        for error in errors:\n            print(f"     - {error}")\n    \n    print(f"\n" + "="*70)\n    print(f"üéâ BLOCKCHAIN INTEGRATION TEST COMPLETE!")\n    print(f"‚úÖ All user actions successfully recorded on blockchain")\n    print(f"‚úÖ Transparent civic governance system operational")\n    print(f"‚úÖ Ready for production civic engagement platform")\n    print(f"="*70)\n\ndef demonstrate_blockchain_features():\n    """Demonstrate key blockchain features for civic governance\"\"\"\n    \n    print(f"\n" + "="*70)\n    print(f"üèõÔ∏è BLOCKCHAIN FEATURES FOR CIVIC GOVERNANCE")\n    print(f"="*70)\n    \n    blockchain = CivicBlockchain()\n    \n    # Demonstrate immutable audit trail\n    print(f"\nüìã Immutable Audit Trail:")\n    print(f"   ‚úÖ All user registrations permanently recorded")\n    print(f"   ‚úÖ Every login/logout tracked with timestamps")\n    print(f"   ‚úÖ Role changes recorded with authorization")\n    print(f"   ‚úÖ Voting actions cryptographically signed")\n    print(f"   ‚úÖ Debate participation and quality ratings")\n    print(f"   ‚úÖ Complete transparency for citizen oversight")\n    \n    # Demonstrate hierarchical structure\n    print(f"\nüìö Hierarchical Blockchain Structure:")\n    print(f"   üìÑ Pages: Individual actions (user registration, votes, debates)")\n    print(f"   üìñ Chapters: 24-hour rollups of pages with summaries")\n    print(f"   üìö Books: Monthly collections of chapters")\n    print(f"   üì¶ Parts: Yearly archives of books")\n    print(f"   üóÑÔ∏è Series: 10-year long-term storage")\n    \n    # Demonstrate consensus mechanism\n    print(f"\n‚ö° Proof of Authority Consensus:")\n    print(f"   üë• Validators: Elected representatives serve as validators")\n    print(f"   üîê Signatures: RSA-2048 cryptographic signatures")\n    print(f"   ü§ù Consensus: 67% of validators must agree on blocks")\n    print(f"   ‚öñÔ∏è Constitutional: Elder oversight of all governance actions")\n    \n    # Demonstrate transparency features\n    print(f"\nüîç Transparency & Accountability:")\n    print(f"   üîç Search: Find any user's complete action history")\n    print(f"   üìä Statistics: Real-time network health monitoring")\n    print(f"   üõ°Ô∏è Integrity: Cryptographic verification of all records")\n    print(f"   üìà Analytics: Participation metrics and governance insights")\n    \n    # Demonstrate security features\n    print(f"\nüîí Security & Privacy:")\n    print(f"   üîë RSA Keys: 2048-bit cryptographic signatures")\n    print(f"   üõ°Ô∏è Validation: Multi-layer integrity checking")\n    print(f"   üîê Encryption: Secure storage of sensitive data")\n    print(f"   üë§ Privacy: Personal data protected while actions transparent")\n    \n    print(f"\nüöÄ This blockchain system enables:")\n    print(f"   ‚Ä¢ Transparent democratic governance")\n    print(f"   ‚Ä¢ Constitutional compliance verification")\n    print(f"   ‚Ä¢ Immutable voting records")\n    print(f"   ‚Ä¢ Accountable representative actions")\n    print(f"   ‚Ä¢ Citizen oversight and participation tracking")\n    print(f"   ‚Ä¢ Anti-corruption measures through transparency")\n    print(f"   ‚Ä¢ Due process and appeal documentation")\n\ndef main():\n    \"\"\"Run complete blockchain integration demonstration\"\"\"\n    \n    print(f\"üèõÔ∏è CIVIC ENGAGEMENT PLATFORM - BLOCKCHAIN SYSTEM\")\n    print(f\"=\" * 80)\n    \n    try:\n        # Test integration\n        test_user_blockchain_integration()\n        \n        # Show features\n        demonstrate_blockchain_features()\n        \n        print(f\"\\n\" + \"=\" * 80)\n        print(f\"üéâ BLOCKCHAIN INTEGRATION COMPLETE!\")\n        print(f\"‚úÖ Civic governance blockchain is fully operational\")\n        print(f\"‚úÖ User actions are transparently recorded and verifiable\")\n        print(f\"‚úÖ Ready for democratic participation at scale\")\n        print(f\"=\" * 80)\n        \n    except Exception as e:\n        print(f\"\\n‚ùå Error during blockchain integration test: {e}\")\n        print(f\"Check that all dependencies are installed and systems are configured.\")\n\nif __name__ == \"__main__\":\n    main()