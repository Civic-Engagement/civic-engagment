"""
CITY/TOWN ELECTION UI - User interface for municipal elections and governance
Provides interfaces for city registration, candidate registration, voting, and election management
"""

import sys
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple

try:
    from PyQt5.QtWidgets import (
        QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QLineEdit,
        QTextEdit, QComboBox, QTableWidget, QTableWidgetItem, QTabWidget,
        QGroupBox, QProgressBar, QMessageBox, QDialog, QDialogButtonBox,
        QFormLayout, QSpinBox, QCheckBox, QFrame, QScrollArea, QGridLayout,
        QSplitter, QTreeWidget, QTreeWidgetItem, QHeaderView, QApplication
    )
    from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QThread, pyqtSlot
    from PyQt5.QtGui import QFont, QPixmap, QPalette, QColor, QIcon
    PYQT_AVAILABLE = True
except ImportError:
    print("Warning: PyQt5 not available for city election UI")
    PYQT_AVAILABLE = False
    # Create placeholder classes
    class QWidget: pass
    class QVBoxLayout: pass
    class QHBoxLayout: pass
    class QLabel: pass
    class QPushButton: pass
    class QLineEdit: pass
    class QTextEdit: pass
    class QComboBox: pass
    class QTableWidget: pass
    class QTabWidget: pass
    class QGroupBox: pass
    class QProgressBar: pass
    class QMessageBox: pass
    class QDialog: pass
    class QFormLayout: pass
    class QSpinBox: pass
    class QCheckBox: pass
    class QFrame: pass
    class QScrollArea: pass
    class QGridLayout: pass
    class QSplitter: pass
    class QTreeWidget: pass
    class QTreeWidgetItem: pass
    class QTimer: pass
    class pyqtSignal: pass
    class QThread: pass
    class pyqtSlot: pass

# Import city election system
try:
    from governance.city_elections import (
        CityElectionManager, CityElectionConfig, CityOffice, CityElectionStatus,
        CityElectionTrigger, CityCandidate, CityElection
    )
    CITY_ELECTIONS_AVAILABLE = True
except ImportError:
    print("Warning: City election system not available")
    CITY_ELECTIONS_AVAILABLE = False
    # Placeholder classes
    class CityElectionManager: pass
    class CityOffice: pass
    class CityElectionStatus: pass

# Import session management
try:
    from users.session import SessionManager
    SESSION_AVAILABLE = True
except ImportError:
    print("Warning: Session management not available")
    SESSION_AVAILABLE = False
    class SessionManager: 
        @staticmethod
        def get_current_user(): return None
        @staticmethod
        def is_authenticated(): return False


class CityRegistrationDialog(QDialog):
    """Dialog for registering a new city/town"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Register City/Town")
        self.setModal(True)
        self.resize(500, 400)
        
        # Create layout
        layout = QFormLayout(self)
        
        # City information fields
        self.city_name_edit = QLineEdit()
        self.city_name_edit.setPlaceholderText("Enter city or town name")
        layout.addRow("City/Town Name:", self.city_name_edit)
        
        self.state_edit = QLineEdit()
        self.state_edit.setPlaceholderText("Enter state/province")
        layout.addRow("State/Province:", self.state_edit)
        
        self.country_edit = QLineEdit()
        self.country_edit.setPlaceholderText("Enter country")
        self.country_edit.setText("Democratic Republic")  # Default
        layout.addRow("Country:", self.country_edit)
        
        self.population_spinbox = QSpinBox()
        self.population_spinbox.setRange(100, 10000000)  # 100 to 10 million
        self.population_spinbox.setValue(10000)  # Default 10k
        self.population_spinbox.setSuffix(" people")
        layout.addRow("Estimated Population:", self.population_spinbox)
        
        # Advanced settings
        advanced_group = QGroupBox("Advanced Election Settings")\n        advanced_layout = QFormLayout(advanced_group)\n        \n        self.initial_threshold_spinbox = QSpinBox()\n        self.initial_threshold_spinbox.setRange(1, 10)\n        self.initial_threshold_spinbox.setValue(1)\n        self.initial_threshold_spinbox.setSuffix("%")\n        advanced_layout.addRow("Initial Election Threshold:", self.initial_threshold_spinbox)\n        \n        self.expansion_threshold_spinbox = QSpinBox()\n        self.expansion_threshold_spinbox.setRange(10, 100)\n        self.expansion_threshold_spinbox.setValue(50)\n        self.expansion_threshold_spinbox.setSuffix("%")\n        advanced_layout.addRow("Expansion Election Threshold:", self.expansion_threshold_spinbox)\n        \n        self.term_length_spinbox = QSpinBox()\n        self.term_length_spinbox.setRange(1, 4)\n        self.term_length_spinbox.setValue(1)\n        self.term_length_spinbox.setSuffix(" year(s)")\n        advanced_layout.addRow("Term Length:", self.term_length_spinbox)\n        \n        self.max_terms_spinbox = QSpinBox()\n        self.max_terms_spinbox.setRange(1, 10)\n        self.max_terms_spinbox.setValue(4)\n        self.max_terms_spinbox.setSuffix(" terms")\n        advanced_layout.addRow("Maximum Terms:", self.max_terms_spinbox)\n        \n        self.consecutive_checkbox = QCheckBox("Prohibit consecutive terms")\n        self.consecutive_checkbox.setChecked(True)\n        advanced_layout.addRow("Term Restrictions:", self.consecutive_checkbox)\n        \n        layout.addRow(advanced_group)\n        \n        # Buttons\n        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        button_box.accepted.connect(self.accept)\n        button_box.rejected.connect(self.reject)\n        layout.addRow(button_box)\n        \n    def get_city_config(self) -> Dict[str, Any]:\n        """Get city configuration from dialog inputs"""\n        return {\n            'city_name': self.city_name_edit.text().strip(),\n            'state': self.state_edit.text().strip(),\n            'country': self.country_edit.text().strip(),\n            'population_estimate': self.population_spinbox.value(),\n            'initial_threshold_percent': self.initial_threshold_spinbox.value() / 100.0,\n            'expansion_threshold_percent': self.expansion_threshold_spinbox.value() / 100.0,\n            'term_length_years': self.term_length_spinbox.value(),\n            'max_consecutive_terms': self.max_terms_spinbox.value(),\n            'consecutive_term_restriction': self.consecutive_checkbox.isChecked()\n        }\n\n\nclass CandidateRegistrationDialog(QDialog):\n    """Dialog for registering as a candidate for city office"""\n    \n    def __init__(self, city_id: str, city_name: str, available_offices: List[str], parent=None):\n        super().__init__(parent)\n        self.city_id = city_id\n        self.setWindowTitle(f"Run for Office - {city_name}")\n        self.setModal(True)\n        self.resize(600, 500)\n        \n        # Create layout\n        layout = QFormLayout(self)\n        \n        # Office selection\n        self.office_combo = QComboBox()\n        for office in available_offices:\n            self.office_combo.addItem(office.replace('_', ' ').title(), office)\n        layout.addRow("Office:", self.office_combo)\n        \n        # Platform statement\n        platform_label = QLabel("Platform Statement:")\n        self.platform_edit = QTextEdit()\n        self.platform_edit.setPlaceholderText(\n            "Describe your vision for the city, key policy positions, "  \n            "and what you hope to accomplish if elected. "  \n            "This will be visible to all voters."\n        )\n        self.platform_edit.setMaximumHeight(150)\n        layout.addRow(platform_label, self.platform_edit)\n        \n        # Campaign slogan\n        self.slogan_edit = QLineEdit()\n        self.slogan_edit.setPlaceholderText("Enter a memorable campaign slogan (optional)")\n        self.slogan_edit.setMaxLength(100)\n        layout.addRow("Campaign Slogan:", self.slogan_edit)\n        \n        # Term limit information display\n        term_info = QLabel(\n            "Term Limits: 1 year terms, maximum 4 total terms, "\n            "cannot serve consecutive terms"\n        )\n        term_info.setStyleSheet("color: #666; font-style: italic;")\n        term_info.setWordWrap(True)\n        layout.addRow("", term_info)\n        \n        # Eligibility confirmation\n        eligibility_group = QGroupBox("Eligibility Confirmation")\n        eligibility_layout = QVBoxLayout(eligibility_group)\n        \n        self.residency_checkbox = QCheckBox("I am a registered member of this city")\n        self.eligibility_checkbox = QCheckBox("I meet all term limit requirements")\n        self.commitment_checkbox = QCheckBox("I commit to serving the full term if elected")\n        \n        eligibility_layout.addWidget(self.residency_checkbox)\n        eligibility_layout.addWidget(self.eligibility_checkbox)\n        eligibility_layout.addWidget(self.commitment_checkbox)\n        \n        layout.addRow(eligibility_group)\n        \n        # Buttons\n        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)\n        button_box.accepted.connect(self.validate_and_accept)\n        button_box.rejected.connect(self.reject)\n        layout.addRow(button_box)\n        \n    def validate_and_accept(self):\n        """Validate form before accepting"""\n        if not self.platform_edit.toPlainText().strip():\n            QMessageBox.warning(self, "Incomplete Form", "Please provide a platform statement.")\n            return\n            \n        if not all([self.residency_checkbox.isChecked(),\n                   self.eligibility_checkbox.isChecked(), \n                   self.commitment_checkbox.isChecked()]):\n            QMessageBox.warning(self, "Eligibility Requirements", \n                              "Please confirm all eligibility requirements.")\n            return\n            \n        self.accept()\n        \n    def get_candidate_info(self) -> Dict[str, Any]:\n        """Get candidate information from dialog"""\n        return {\n            'office': self.office_combo.currentData(),\n            'platform_statement': self.platform_edit.toPlainText().strip(),\n            'campaign_slogan': self.slogan_edit.text().strip(),\n            'city_id': self.city_id\n        }\n\n\nclass CityElectionWidget(QWidget):\n    """Main widget for city/town election management"""\n    \n    # Signals\n    election_update = pyqtSignal(str, dict)  # election_id, election_data\n    \n    def __init__(self, parent=None):\n        super().__init__(parent)\n        \n        # Initialize election manager\n        self.election_manager = CityElectionManager() if CITY_ELECTIONS_AVAILABLE else None\n        \n        # Create UI\n        self.init_ui()\n        \n        # Setup timer for updates\n        self.update_timer = QTimer()\n        self.update_timer.timeout.connect(self.refresh_data)\n        self.update_timer.start(30000)  # Update every 30 seconds\n        \n        # Initial load\n        self.refresh_data()\n        \n    def init_ui(self):\n        """Initialize user interface"""\n        \n        # Main layout\n        main_layout = QVBoxLayout(self)\n        main_layout.setContentsMargins(10, 10, 10, 10)\n        \n        # Header\n        header_layout = QHBoxLayout()\n        \n        title_label = QLabel("City/Town Elections & Governance")\n        title_font = QFont()\n        title_font.setPointSize(16)\n        title_font.setBold(True)\n        title_label.setFont(title_font)\n        header_layout.addWidget(title_label)\n        \n        header_layout.addStretch()\n        \n        # Action buttons\n        self.register_city_btn = QPushButton("Register New City")\n        self.register_city_btn.clicked.connect(self.register_city)\n        header_layout.addWidget(self.register_city_btn)\n        \n        self.join_city_btn = QPushButton("Join City")\n        self.join_city_btn.clicked.connect(self.join_city)\n        header_layout.addWidget(self.join_city_btn)\n        \n        main_layout.addLayout(header_layout)\n        \n        # Tab widget for different views\n        self.tab_widget = QTabWidget()\n        \n        # Cities overview tab\n        self.cities_tab = self.create_cities_tab()\n        self.tab_widget.addTab(self.cities_tab, "Cities & Towns")\n        \n        # My elections tab\n        self.elections_tab = self.create_elections_tab()\n        self.tab_widget.addTab(self.elections_tab, "My Elections")\n        \n        # Candidates tab\n        self.candidates_tab = self.create_candidates_tab()\n        self.tab_widget.addTab(self.candidates_tab, "Candidates")\n        \n        # Statistics tab\n        self.statistics_tab = self.create_statistics_tab()\n        self.tab_widget.addTab(self.statistics_tab, "Statistics")\n        \n        main_layout.addWidget(self.tab_widget)\n        \n    def create_cities_tab(self) -> QWidget:\n        """Create cities overview tab"""\n        \n        tab = QWidget()\n        layout = QVBoxLayout(tab)\n        \n        # Cities table\n        self.cities_table = QTableWidget()\n        self.cities_table.setColumnCount(7)\n        self.cities_table.setHorizontalHeaderLabels([\n            "City/Town", "State", "Members", "Population %", \n            "1% Threshold", "50% Threshold", "Status"\n        ])\n        \n        header = self.cities_table.horizontalHeader()\n        header.setStretchLastSection(True)\n        \n        self.cities_table.doubleClicked.connect(self.view_city_details)\n        \n        layout.addWidget(self.cities_table)\n        \n        # City actions\n        actions_layout = QHBoxLayout()\n        \n        self.view_city_btn = QPushButton("View Details")\n        self.view_city_btn.clicked.connect(self.view_selected_city)\n        actions_layout.addWidget(self.view_city_btn)\n        \n        self.run_for_office_btn = QPushButton("Run for Office")\n        self.run_for_office_btn.clicked.connect(self.run_for_office)\n        actions_layout.addWidget(self.run_for_office_btn)\n        \n        actions_layout.addStretch()\n        \n        self.refresh_cities_btn = QPushButton("Refresh")\n        self.refresh_cities_btn.clicked.connect(self.refresh_cities_data)\n        actions_layout.addWidget(self.refresh_cities_btn)\n        \n        layout.addLayout(actions_layout)\n        \n        return tab\n        \n    def create_elections_tab(self) -> QWidget:\n        """Create elections tab"""\n        \n        tab = QWidget()\n        layout = QVBoxLayout(tab)\n        \n        # Elections table\n        self.elections_table = QTableWidget()\n        self.elections_table.setColumnCount(6)\n        self.elections_table.setHorizontalHeaderLabels([\n            "City/Town", "Election Type", "Offices", "Status", "Voting Period", "Actions"\n        ])\n        \n        header = self.elections_table.horizontalHeader()\n        header.setStretchLastSection(True)\n        \n        layout.addWidget(self.elections_table)\n        \n        return tab\n        \n    def create_candidates_tab(self) -> QWidget:\n        """Create candidates tab"""\n        \n        tab = QWidget()\n        layout = QVBoxLayout(tab)\n        \n        # Candidates table\n        self.candidates_table = QTableWidget()\n        self.candidates_table.setColumnCount(6)\n        self.candidates_table.setHorizontalHeaderLabels([\n            "Candidate", "City/Town", "Office", "Platform Summary", "Status", "Votes"\n        ])\n        \n        header = self.candidates_table.horizontalHeader()\n        header.setStretchLastSection(True)\n        \n        layout.addWidget(self.candidates_table)\n        \n        return tab\n        \n    def create_statistics_tab(self) -> QWidget:\n        """Create statistics tab"""\n        \n        tab = QWidget()\n        layout = QVBoxLayout(tab)\n        \n        # Statistics display\n        stats_scroll = QScrollArea()\n        stats_widget = QWidget()\n        self.stats_layout = QVBoxLayout(stats_widget)\n        \n        stats_scroll.setWidget(stats_widget)\n        stats_scroll.setWidgetResizable(True)\n        \n        layout.addWidget(stats_scroll)\n        \n        return tab\n        \n    def refresh_data(self):\n        """Refresh all data"""\n        if not self.election_manager:\n            return\n            \n        self.refresh_cities_data()\n        self.refresh_elections_data()\n        self.refresh_candidates_data()\n        self.refresh_statistics_data()\n        \n    def refresh_cities_data(self):\n        """Refresh cities table data"""\n        if not self.election_manager:\n            return\n            \n        try:\n            # Get city statistics\n            stats = self.election_manager.get_city_statistics()\n            \n            # Clear and populate table\n            self.cities_table.setRowCount(0)\n            \n            # This would be populated with actual city data\n            # For now, show placeholder\n            self.cities_table.setRowCount(1)\n            \n            placeholder_data = [\n                "Demo City", "Demo State", "0", "0.0%", "❌", "❌", "Pending Registration"\n            ]\n            \n            for col, data in enumerate(placeholder_data):\n                item = QTableWidgetItem(str(data))\n                self.cities_table.setItem(0, col, item)\n                \n        except Exception as e:\n            print(f"Error refreshing cities data: {e}")\n            \n    def refresh_elections_data(self):\n        """Refresh elections data"""\n        if not self.election_manager:\n            return\n            \n        try:\n            self.elections_table.setRowCount(0)\n            # Populate with actual election data\n            \n        except Exception as e:\n            print(f"Error refreshing elections data: {e}")\n            \n    def refresh_candidates_data(self):\n        """Refresh candidates data"""\n        if not self.election_manager:\n            return\n            \n        try:\n            self.candidates_table.setRowCount(0)\n            # Populate with actual candidate data\n            \n        except Exception as e:\n            print(f"Error refreshing candidates data: {e}")\n            \n    def refresh_statistics_data(self):\n        """Refresh statistics display"""\n        if not self.election_manager:\n            return\n            \n        try:\n            # Clear existing stats\n            for i in reversed(range(self.stats_layout.count())):\n                child = self.stats_layout.itemAt(i).widget()\n                if child:\n                    child.setParent(None)\n            \n            # Get and display statistics\n            stats = self.election_manager.get_city_statistics()\n            \n            for key, value in stats.items():\n                if isinstance(value, (int, float)):\n                    label_text = f"{key.replace('_', ' ').title()}: {value}"\n                    if isinstance(value, float):\n                        label_text = f"{key.replace('_', ' ').title()}: {value:.2f}"\n                else:\n                    label_text = f"{key.replace('_', ' ').title()}: {value}"\n                    \n                label = QLabel(label_text)\n                self.stats_layout.addWidget(label)\n                \n        except Exception as e:\n            print(f"Error refreshing statistics: {e}")\n            \n    def register_city(self):\n        """Register a new city/town"""\n        \n        dialog = CityRegistrationDialog(self)\n        if dialog.exec_() == QDialog.Accepted:\n            config = dialog.get_city_config()\n            \n            if not all([config['city_name'], config['state'], config['country']]):\n                QMessageBox.warning(self, "Incomplete Information", \n                                  "Please fill in all required fields.")\n                return\n                \n            if not self.election_manager:\n                QMessageBox.warning(self, "System Error", \n                                  "Election system not available.")\n                return\n                \n            try:\n                success, message, city_id = self.election_manager.register_city(**config)\n                \n                if success:\n                    QMessageBox.information(self, "City Registered", \n                                          f"Successfully registered {config['city_name']}!\\n\\n"\n                                          f"City ID: {city_id}\\n\\n"\n                                          f"Members needed for first election: "\n                                          f"{int(config['population_estimate'] * config['initial_threshold_percent'])}")\n                    self.refresh_cities_data()\n                else:\n                    QMessageBox.warning(self, "Registration Failed", message)\n                    \n            except Exception as e:\n                QMessageBox.critical(self, "Error", f"Failed to register city: {e}")\n                \n    def join_city(self):\n        """Join an existing city"""\n        \n        # This would show a dialog to select and join a city\n        QMessageBox.information(self, "Join City", \n                              "City joining functionality will be implemented here.\\n\\n"\n                              "You will be able to browse available cities and "\n                              "request membership.")\n                              \n    def view_city_details(self):\n        """View detailed city information"""\n        current_row = self.cities_table.currentRow()\n        if current_row >= 0:\n            city_name = self.cities_table.item(current_row, 0).text()\n            QMessageBox.information(self, f"City Details - {city_name}", \n                                  f"Detailed information for {city_name} will be shown here.\\n\\n"\n                                  "This will include population data, election history, "\n                                  "current officials, and participation statistics.")\n                                  \n    def view_selected_city(self):\n        """View selected city details"""\n        self.view_city_details()\n        \n    def run_for_office(self):\n        """Register to run for office"""\n        \n        current_row = self.cities_table.currentRow()\n        if current_row < 0:\n            QMessageBox.warning(self, "No Selection", "Please select a city first.")\n            return\n            \n        city_name = self.cities_table.item(current_row, 0).text()\n        \n        # Mock available offices\n        available_offices = ["city_representative", "city_senator"]\n        \n        dialog = CandidateRegistrationDialog("demo_city_id", city_name, available_offices, self)\n        if dialog.exec_() == QDialog.Accepted:\n            candidate_info = dialog.get_candidate_info()\n            \n            if not SESSION_AVAILABLE or not SessionManager.is_authenticated():\n                QMessageBox.warning(self, "Authentication Required", \n                                  "Please log in to register as a candidate.")\n                return\n                \n            user = SessionManager.get_current_user()\n            if not user:\n                QMessageBox.warning(self, "User Error", "Unable to get current user information.")\n                return\n                \n            # Register candidate\n            if self.election_manager:\n                try:\n                    # This would use the actual city_id and office enum\n                    QMessageBox.information(self, "Candidate Registered", \n                                          f"Successfully registered as candidate for {candidate_info['office']}!\\n\\n"\n                                          f"Platform: {candidate_info['platform_statement'][:100]}...\\n\\n"\n                                          "Your candidacy will be active for upcoming elections.")\n                    \n                    self.refresh_candidates_data()\n                    \n                except Exception as e:\n                    QMessageBox.critical(self, "Registration Error", \n                                       f"Failed to register candidate: {e}")\n            else:\n                QMessageBox.warning(self, "System Error", "Election system not available.")\n\n\nclass CityElectionTab(QWidget):\n    """Tab widget for city/town elections in the main application"""\n    \n    def __init__(self, parent=None):\n        super().__init__(parent)\n        \n        # Create main layout\n        layout = QVBoxLayout(self)\n        layout.setContentsMargins(0, 0, 0, 0)\n        \n        # Add city election widget\n        self.city_election_widget = CityElectionWidget()\n        layout.addWidget(self.city_election_widget)\n        \n        # Connect signals if needed\n        if hasattr(self.city_election_widget, 'election_update'):\n            self.city_election_widget.election_update.connect(self.handle_election_update)\n            \n    @pyqtSlot(str, dict)\n    def handle_election_update(self, election_id: str, election_data: dict):\n        """Handle election updates"""\n        print(f"Election update received: {election_id}")\n        # Handle election update logic here\n\n\n# Test function\ndef test_city_election_ui():\n    """Test the city election UI"""\n    \n    if not PYQT_AVAILABLE:\n        print("PyQt5 not available, cannot test UI")\n        return\n        \n    app = QApplication(sys.argv)\n    \n    # Create main window\n    window = CityElectionWidget()\n    window.setWindowTitle("City/Town Elections - Test")\n    window.resize(1000, 700)\n    window.show()\n    \n    sys.exit(app.exec_())\n\n\nif __name__ == "__main__":\n    test_city_election_ui()