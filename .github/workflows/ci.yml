name: Civic Engagement Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't stop other jobs if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        include:
          # Test Raspberry Pi emulation on Linux
          - os: ubuntu-latest
            python-version: '3.11'
            arch: arm64
            platform-name: "Raspberry Pi (ARM64)"
          - os: ubuntu-latest
            python-version: '3.11'  
            arch: armhf
            platform-name: "Raspberry Pi (ARMHF)"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu/Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libegl1-mesa libgl1-mesa-glx libxkbcommon-x11-0
        # For ARM emulation testing
        if [ "${{ matrix.arch }}" = "arm64" ] || [ "${{ matrix.arch }}" = "armhf" ]; then
          sudo apt-get install -y qemu-user-static
        fi
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # Install any macOS specific dependencies if needed
        echo "macOS dependencies installed"
    
    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Install any Windows specific dependencies if needed
        echo "Windows dependencies installed"
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        cd civic_desktop
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Install additional test dependencies
      run: |
        cd civic_desktop
        pip install pytest-timeout pytest-mock
    
    - name: Run linting (flake8)
      run: |
        cd civic_desktop
        flake8 --version
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run type checking (mypy)
      continue-on-error: true  # Don't fail CI for type errors initially
      run: |
        cd civic_desktop
        mypy --version
        mypy . --ignore-missing-imports --no-strict-optional
    
    - name: Check code formatting (black)
      run: |
        cd civic_desktop
        black --version
        black --check --diff .
      continue-on-error: true  # Don't fail CI for formatting initially
    
    - name: Check import sorting (isort)
      run: |
        cd civic_desktop
        isort --version
        isort --check-only --diff .
      continue-on-error: true  # Don't fail CI for import sorting initially
    
    - name: Run basic import tests
      run: |
        cd civic_desktop
        python -c "import main; print('‚úÖ Main module imports successfully')"
        python -c "import users.backend; print('‚úÖ Users backend imports successfully')"
    
    - name: Run tests with pytest (Linux with xvfb)
      if: runner.os == 'Linux'
      run: |
        cd civic_desktop
        xvfb-run -a python -m pytest tests/ -v --tb=short --timeout=60 --maxfail=5
    
    - name: Run tests with pytest (Windows/macOS)
      if: runner.os != 'Linux'
      run: |
        cd civic_desktop
        python -m pytest tests/ -v --tb=short --timeout=60 --maxfail=5
    
    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        cd civic_desktop
        pip install coverage
        coverage run -m pytest tests/
        coverage report -m
        coverage xml
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./civic_desktop/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
    
    - name: Run Bandit security scan
      run: |
        cd civic_desktop
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
    
    - name: Run Safety vulnerability check
      run: |
        cd civic_desktop
        safety check --json || true
        safety check
    
    - name: Run Semgrep security scan
      run: |
        cd civic_desktop
        semgrep --config=auto . --json --output=semgrep-report.json || true
        semgrep --config=auto . --severity=ERROR
    
    - name: Check for secrets and sensitive files
      run: |
        # Check for accidentally committed secrets
        if find . -name "*.pem" -o -name "*.key" -o -name "*.p12" | grep -v /tmp/ | grep -v test; then
          echo "‚ùå Warning: Found potential private key files"
          find . -name "*.pem" -o -name "*.key" -o -name "*.p12" | grep -v /tmp/ | grep -v test
          exit 1
        fi
        
        # Check for database files with real data
        if find . -name "*.db" -o -name "*_production.json" | grep -v test; then
          echo "‚ùå Warning: Found potential production database files"
          find . -name "*.db" -o -name "*_production.json" | grep -v test
          exit 1
        fi
        
        echo "‚úÖ No sensitive files found"
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          civic_desktop/bandit-report.json
          civic_desktop/semgrep-report.json

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install radon complexity-checker
    
    - name: Check code complexity
      run: |
        cd civic_desktop
        radon cc . --average --show-complexity
        radon mi . --show
    
    - name: Check for TODO/FIXME comments
      run: |
        cd civic_desktop
        echo "üîç Checking for TODO/FIXME comments that should be addressed:"
        if grep -r "TODO:\|FIXME:\|XXX:" . --include="*.py" | grep -v "test_"; then
          echo "‚ö†Ô∏è Found TODO/FIXME comments in production code"
          # Don't fail CI, just warn
        else
          echo "‚úÖ No TODO/FIXME comments found in production code"
        fi
    
    - name: Check print statements usage
      run: |
        cd civic_desktop
        echo "üîç Checking for print statements that should use logging:"
        if grep -r "print(" . --include="*.py" | grep -v "test_" | grep -v "__main__" | grep -v "debug" | head -10; then
          echo "‚ö†Ô∏è Found print statements that should use logging (showing first 10)"
          # Don't fail CI, just warn
        else
          echo "‚úÖ No problematic print statements found"
        fi

  build-verification:
    name: Build and Distribution Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: Test application startup
      run: |
        cd civic_desktop
        pip install -r requirements.txt
        # Test basic startup without GUI
        timeout 30s python -c "
        import sys
        sys.path.append('.')
        try:
            import main
            print('‚úÖ Application startup test successful')
        except ImportError as e:
            print(f'‚ùå Import error: {e}')
            sys.exit(1)
        except Exception as e:
            print(f'‚ö†Ô∏è Startup warning: {e}')
            print('‚úÖ Basic imports working despite warning')
        " || true
    
    - name: Verify all modules can be imported
      run: |
        cd civic_desktop
        python -c "
        import sys
        import importlib
        import os
        
        modules_to_test = [
            'users.backend',
            'blockchain.blockchain', 
            'debates.backend',
            'moderation.backend',
            'contracts.contract_types',
            'crypto.civic_coin',
            'utils.validation'
        ]
        
        failed_imports = []
        for module in modules_to_test:
            try:
                importlib.import_module(module)
                print(f'‚úÖ {module} imported successfully')
            except Exception as e:
                print(f'‚ùå {module} failed: {e}')
                failed_imports.append(module)
        
        if failed_imports:
            print(f'\\n‚ùå Failed imports: {failed_imports}')
            # Don't fail CI for now, just report
        else:
            print('\\n‚úÖ All core modules imported successfully')
        "

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd civic_desktop
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run integration tests
      run: |
        cd civic_desktop
        echo "üîÑ Running integration tests..."
        # Run specific integration test files
        if [ -f "tests/test_comprehensive.py" ]; then
          echo "Running comprehensive tests..."
          python -m pytest tests/test_comprehensive.py -v --tb=short || true
        fi
        
        echo "‚úÖ Integration tests completed"
    
    - name: Generate test report
      run: |
        cd civic_desktop
        echo "üìä Generating test report..."
        python -m pytest tests/ --tb=short --junit-xml=test-report.xml || true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: civic_desktop/test-report.xml